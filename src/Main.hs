--
-- Copyright © 2015, Patrick M. Niedzielski.
-- This file is part of fowlie-mga
--
-- fowlie-mga is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published
-- by the Free Software Foundation, either version 3 of the License,
-- or (at your option) any later version.
--
-- fowlie-mga is distributed in the hope that it will be useful, but
-- WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-- General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with fowlie-mga.  If not, see <http://www.gnu.org/licenses/>.
--

{-# LANGUAGE UnicodeSyntax #-}

module Main( main ) where

import System.Environment
import Data.Maybe
import Prelude.Unicode


--------------------------------------------------------------------------------
--                                                          PROGRAM STRUCTURE --
--------------------------------------------------------------------------------


-- | 'main' is the entry point of the program
main ∷ IO ()
main = do
  args ← getArgs
  let parses = fmap parse args
  print $ show parses


--------------------------------------------------------------------------------
--                                                               TOKENIZATION --
--------------------------------------------------------------------------------


type Token = String

tokenize ∷ String → [Token]
tokenize = words


--------------------------------------------------------------------------------
--                                                                    PARSING --
--------------------------------------------------------------------------------


parseTokens ∷ [Token] → Maybe ()
parseTokens _ = Just ()


--------------------------------------------------------------------------------
--                                                                RECOGNITION --
--------------------------------------------------------------------------------


-- | 'recognize' takes a list of tokens and returns whether the list
-- of tokens can be generated by the language.
recognizeTokens ∷ [Token] → Bool
recognizeTokens = isJust ∘ parseTokens


--------------------------------------------------------------------------------
--                                                               USER-FACING  --
--------------------------------------------------------------------------------


parse     = parseTokens     ∘ tokenize
recognize = recognizeTokens ∘ tokenize
